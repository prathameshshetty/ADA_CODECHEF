// 19.Searching in a Binary Search Tree
// The below code is written in C


#include <stdio.h>
#include <stdlib.h>

struct Node {
    int val;
    struct Node* left;
    struct Node* right;
};
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->val = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

int Search(struct Node* root, int x) {
    if(root == NULL) {
        return 0;
    }
    if(root->val == x) {
        return 1;
    }
    if(root->val > x) {
        return Search(root->left, x);
    }
    return Search(root->right, x);
}

void Run(struct Node* root) {
    printf("%d\n", Search(root, 35));
    printf("%d\n", Search(root, 25));
    printf("%d\n", Search(root, 1));
    printf("%d\n", Search(root, 20));
}

int main() {
    struct Node* root = createNode(10);
    struct Node* child1 = createNode(5);
    struct Node* child2 = createNode(30);
    root->left = child1;
    root->right = child2;

    struct Node* child3 = createNode(40);
    struct Node* child4 = createNode(25);
    child2->left = child4;
    child2->right = child3;

    struct Node* child5 = createNode(35);
    child3->left = child5;

    struct Node* child6 = createNode(1);
    child1->left = child6;

    Run(root);

    return 0;
}







