// 27.Subset Sum Problem


#include <iostream>
#include <vector>

using namespace std;

// Function to solve the Subset Sum problem using dynamic programming
bool subsetSum(int N, int X, vector<int> &A) {
    // Create a DP array initialized to false
    vector<vector<bool>> dp(N + 1, vector<bool>(X + 1, false));
    
    // If sum is 0, we can always achieve it with an empty subset
    for (int i = 0; i <= N; ++i) {
        dp[i][0] = true;
    }

    // Fill the DP array
    for (int i = 1; i <= N; ++i) {
        for (int j = 1; j <= X; ++j) {
            if (A[i - 1] <= j) {
                dp[i][j] = dp[i - 1][j] || dp[i - 1][j - A[i - 1]];
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }

    // The answer is whether we can form sum X using the first N items
    return dp[N][X];
}

int main() {
    int N, X;
    cin >> N >> X;

    vector<int> A(N);
    for (int i = 0; i < N; ++i) {
        cin >> A[i];
    }

    if (subsetSum(N, X, A)) {
        cout << "YES" << endl;
    } else {
        cout << "NO" << endl;
    }

    return 0;
}
