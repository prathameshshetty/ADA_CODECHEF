// 30.Optimal Binary Search Trees

#include <iostream>
#include <vector>
#include <climits>

using namespace std;

long long optimalBST(const vector<long long>& freq, int n) {
    vector<vector<long long>> dp(n + 1, vector<long long>(n + 1, 0));
    vector<long long> prefix_sum(n + 1, 0);

    // Calculate prefix sum
    for (int i = 1; i <= n; i++) {
        prefix_sum[i] = prefix_sum[i-1] + freq[i-1];
    }

    // Initialize for lengths of 1
    for (int i = 1; i <= n; i++) {
        dp[i][i] = freq[i-1];
    }

    // Fill dp table
    for (int len = 2; len <= n; len++) {
        for (int i = 1; i <= n - len + 1; i++) {
            int j = i + len - 1;
            dp[i][j] = LLONG_MAX;
            long long sum = prefix_sum[j] - prefix_sum[i-1];

            for (int r = i; r <= j; r++) {
                long long left = (r > i) ? dp[i][r-1] : 0;
                long long right = (r < j) ? dp[r+1][j] : 0;
                dp[i][j] = min(dp[i][j], left + right + sum);
            }
        }
    }

    return dp[1][n];
}

int main() {
    int N;
    cin >> N;

    vector<long long> F(N);
    for (int i = 0; i < N; i++) {
        cin >> F[i];
    }

    cout << optimalBST(F, N) << endl;

    return 0;
}
