// 21.Search Queries
// The below code is written in C.






#include <stdio.h>
#include <stdlib.h>
// Define the structure for a Node
struct Node {
    int val;
    struct Node* left;
    struct Node* right;
    int height; // Store height to get balance nature
};

// Function to create a new node
struct Node* createNode(int val) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->val = val;
    node->height = 1; // Every node has height = 1 initially
    node->left = NULL;
    node->right = NULL;
    return node;
}

// Function to get the height of a node
int get_height(struct Node* node) {
    if (node == NULL) {
        return 0; // Height of a NULL node is 0
    }
    return node->height;
}

// Function to calculate the height of a node
int calculate_height(struct Node* node) {
    return 1 + (get_height(node->left) > get_height(node->right) ? get_height(node->left) : get_height(node->right));
}

// Function to perform right rotation
struct Node* right_rotate(struct Node* node) {
    struct Node* temp = node->left;
    struct Node* temp2 = node->left->right;

    // Rotate the nodes
    temp->right = node;
    node->left = temp2;

    // Recalculate height
    node->height = calculate_height(node);
    temp->height = calculate_height(temp);

    return temp;
}

// Function to perform left rotation
struct Node* left_rotate(struct Node* node) {
    struct Node* temp = node->right;
    struct Node* temp2 = node->right->left;

    // Rotate the nodes
    temp->left = node;
    node->right = temp2;

    // Recalculate height
    node->height = calculate_height(node);
    temp->height = calculate_height(temp);

    return temp;
}

// Function to get the height difference
int Height_difference(struct Node* node) {
    return get_height(node->left) - get_height(node->right);
}

// Function to insert a node in the AVL tree
struct Node* Insert(struct Node* root, int x) {
    if (root == NULL) {
        // At this place a node with value x should exist, but it doesn't
        return createNode(x); // Return the newly created node
    }
    if (root->val < x) {
        // Insert the node into the right subtree
        root->right = Insert(root->right, x);
    } else if (root->val > x) {
        // Insert the node into the left subtree
        root->left = Insert(root->left, x);
    }

    root->height = calculate_height(root);
    int height_difference = Height_difference(root);

    // Left Left case
    if (height_difference > 1 && x < root->left->val) {
        return right_rotate(root);
    }

    // Left Right case
    if (height_difference > 1 && x > root->left->val) {
        root->left = left_rotate(root->left); // Convert into Left Left case
        return right_rotate(root);
    }

    // Right Right case
    if (height_difference < -1 && x > root->right->val) {
        return left_rotate(root);
    }

    // Right Left case
    if (height_difference < -1 && x < root->right->val) {
        root->right = left_rotate(root->right); // Convert into Right Right case
        return right_rotate(root);
    }

    // Return if the tree is already balanced
    return root;
}

// Function to search for a node in the AVL tree
int Search(struct Node* root, int x) {
    if (root == NULL) { // If the node does not exist then return false
        return 0;
    }
    if (root->val == x) {
        return 1;
    }
    if (root->val < x) {
        return Search(root->right, x);
    }
    return Search(root->left, x);
}

int main() {
    int Q;
    scanf("%d", &Q);

    struct Node* root = NULL;

    for (int i = 0; i < Q; i++) {
        int type, id;
        scanf("%d %d", &type, &id);
        if (type == 1) {
            root = Insert(root, id);
        } else if (type == 2) {
            if (Search(root, id)) {
                printf("YES\n");
            } else {
                printf("NO\n");
            }
        }
    }

    return 0;
}

















