//6.Inversion count
//The below code is written in C.



#include <stdio.h>

const int mod = 1000000007;

void merge(int a[], int size_a, int b[], int size_b, int c[]) {
    int idx1 = 0, idx2 = 0;
    int idx = 0;

    while (idx1 < size_a && idx2 < size_b) {
        if (a[idx1] < b[idx2]) {
            c[idx++] = a[idx1++];
        } else {
            c[idx++] = b[idx2++];
        }
    }

    while (idx1 < size_a) {
        c[idx++] = a[idx1++];
    }

    while (idx2 < size_b) {
        c[idx++] = b[idx2++];
    }
}
int countInversions(int a[], int size_a, int b[], int size_b) {
    int ptr = size_b - 1;
    int ans = 0;
    for (int i = 0; i < size_a; i++) {   
        while (ptr >= 0 && b[ptr] < a[i]) { 
            ptr--;
        }
        ans = (ans + (size_b - 1 - ptr)) % mod;
    }
    return ans;
}

int sortAndCount(int a[], int size_a) {
    if (size_a == 1) {
        return 0;
    }

    int mid = size_a / 2;

    int sz1 = mid;
    int sz2 = size_a - sz1;

    int a1[sz1];
    int a2[sz2];

    for (int i = 0; i < mid; i++) {
        a1[i] = a[i];
    }

    for (int i = mid; i < size_a; i++) {
        a2[i - mid] = a[i];
    }
 int left = sortAndCount(a1, sz1); 
    int right = sortAndCount(a2, sz2);

    // Number of inversions when both halves are put together 
    int num = countInversions(a1, sz1, a2, sz2);

    merge(a1, sz1, a2, sz2, a);

    return (((left + right) % mod) + num) % mod;
}

int main() {
    int t; 
    scanf("%d", &t);
    
    while (t--) {
        int n;
        scanf("%d", &n);

        int a[n];
        for (int i = 0; i < n; i++) {
            scanf("%d", &a[i]);
        }

        printf("%d\n", sortAndCount(a, n));
    }

   return 0;
}
